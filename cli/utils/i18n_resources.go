// Code generated by go-bindata.
// sources:
// locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJSON = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x97\xcd\x6e\xd4\x30\x10\xc7\xef\x7d\x8a\x51\x2e\x7b\xd9\xae\xca\xad\xe2\x56\x01\x42\x45\x0b\x95\x76\xcb\x01\x21\x54\x79\x93\x49\x6a\x70\xec\xc8\x76\x5a\xad\x10\xef\xce\x4c\x9c\xb6\x29\x4a\xec\xb4\x5d\xd4\xc3\x5e\xb2\x33\xbf\x99\xfc\xe7\xc3\xce\xf7\x23\x80\xdf\xf4\x03\xc8\x64\x91\xbd\x85\x4c\x34\xcd\x95\x16\x35\x66\xcb\xf0\xd4\x5b\xa1\x9d\x12\x5e\x1a\xdd\xfd\x7d\x9a\xd1\xf3\x3f\xcb\x31\xb7\xd6\x89\x6a\xca\xef\xac\x16\xaa\x12\xf5\x29\xbc\x5b\x9f\x4f\x13\x6e\xd0\x3a\x76\x18\x67\x9c\xac\x4e\x56\x6f\xc6\x9c\xb3\x02\x77\x6d\x15\x8d\xbf\xbd\x36\xb7\xb0\xf9\xb0\xbd\x84\xdc\xd4\x75\xab\x65\xde\xfd\x05\xb7\xd2\x5f\xc3\x43\x72\x46\x7b\x6b\x94\x42\x0b\xc2\x81\xf4\x20\x1d\x34\x68\x4b\x63\x6b\x2c\x56\xa3\xa1\x7f\x3a\xa3\xd3\x91\x4d\xeb\x9b\x96\x70\x1a\x3e\x6d\x2f\xbe\x00\x03\x85\x1f\xe5\xed\x45\xad\x9e\xc2\xfb\x76\xf6\x79\x1d\xe3\x49\x7d\x23\x94\x2c\xae\x5a\xab\x26\x80\xe7\xc1\x02\xbe\x6e\xd6\x60\x2c\x60\xdd\xf8\xfd\xf8\xbb\x5a\xac\xa4\xf3\x76\xcf\xb0\x68\x8e\x9b\xde\x90\x99\x71\x92\x37\xbf\x30\xae\xdf\x3d\xeb\x92\x4d\x47\x69\xf9\x7d\xd9\x92\x99\x0d\x2a\x3c\x95\x9b\xd4\xa5\x99\xca\xa5\x55\x08\xef\x51\xa1\xc7\x62\xbc\x8b\xd9\x39\x36\x3f\x1d\x7c\xda\xb3\x40\x97\x5b\xd9\xf8\xe9\x21\xe0\xf2\x53\x6b\xea\x50\x72\x6e\x61\xb1\xa3\x6e\x00\x7f\x8d\xd4\xda\xba\x94\x55\x6b\xc3\x73\x53\x76\x0f\x69\xe0\x46\xab\xd9\x47\x4c\xb5\xda\x41\x62\x65\x96\x84\xa3\x97\x0b\xc2\x3d\x57\x5b\x87\xf6\x46\xe6\x78\xa5\xa8\x1f\x62\x1a\xf7\x76\xc7\x6c\x37\x83\x94\xd6\x7c\x4d\x66\x50\x0b\x4d\x4a\x15\x50\xcb\xdc\x9a\x1e\xe0\x26\x94\x7d\xc4\x8f\x29\xfc\x32\x72\xd8\x02\xd1\x00\x17\x61\x51\x84\x0a\xae\x60\xdb\x36\x8d\xb1\xa4\x30\xd0\xcc\xb7\xe8\x40\x58\x84\x05\xef\xb0\xc5\x12\x16\xbc\x7b\x16\xbc\x03\x16\x5e\xec\x14\x2e\x26\x72\xb0\x14\x37\x5d\x85\xce\x2a\x52\x83\x01\x65\x6e\x05\x86\xfa\x40\x7f\x56\x00\x73\xa4\xae\x80\x5b\x6c\x4a\xb5\x41\xac\x74\x35\x0e\x11\xe5\xae\x4c\xb1\x68\x97\x34\x30\xbd\x1d\xb0\x8e\x69\xea\x2b\xd5\x5b\xe4\x4c\x4f\x16\x3c\x98\x45\x2a\x3e\xe4\xcc\x2c\x79\x70\x89\xaa\x3e\xa4\x26\x8b\xfb\x44\xde\x01\xcb\x38\xc4\xbe\xd6\xdc\xf2\x12\xce\x2d\x0a\xea\xa7\xd8\xe0\x92\xd9\x71\x30\x4b\x73\x66\x1c\x58\xe8\x83\xde\xfc\x32\x20\x1e\xcd\xd7\x8c\x44\xa3\xe7\xd3\xcb\xd0\xa5\x54\x71\xfe\x06\x45\x41\xd8\xee\xca\x46\x01\xc2\x55\x8b\x9c\xf8\xf0\xf3\x42\x6a\x5e\x08\x02\x06\x12\xf0\x39\x18\x12\xf2\x06\x42\x94\x15\x30\x85\x32\xb4\xa6\x06\xe7\x0b\xba\xb2\xed\xf6\xe4\x53\x8a\x56\xf9\x58\x92\x15\xc6\xd7\x2b\x57\x89\x6c\x12\x84\x74\x7d\x3e\x3e\x53\x44\xa6\xc7\xc4\x7b\x09\x97\xef\xab\x89\x91\x63\x5b\x90\xe3\x97\xf2\x01\xc9\x8b\xf8\x77\xc1\x3d\x8a\x0c\x53\x2c\xd2\x92\xce\x80\xce\x75\x1e\x73\xe0\x90\x62\x1f\x74\x25\x74\xab\xa0\x5b\x0a\xa9\xb0\x42\xc5\xaf\xcb\x7d\x4c\x32\x8b\x9f\x7c\x0f\xd7\xbb\x64\xcf\x06\xb3\x34\x27\x96\x56\xb8\x26\xde\xb5\x17\x4f\xd6\xfc\xfe\xea\xf1\xe9\xc1\x78\x14\xa4\xfb\x4e\xe4\x2b\xae\x6b\x30\x97\xa5\x24\xd9\xfb\x0e\x5c\x72\xeb\x2c\x59\xf2\x99\xe5\xee\x13\x38\x4c\x8f\xf7\xb0\x43\xb5\xf9\x83\x38\xff\xa5\xd3\x7b\x7c\xaa\xeb\x18\xfb\x4f\xcb\x1d\xfd\x38\xfa\x1b\x00\x00\xff\xff\xbd\x8e\x08\xfd\xab\x10\x00\x00")

func localesEnUsJSONBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJSON,
		"locales/en-US.json",
	)
}

func localesEnUsJSON() (*asset, error) {
	bytes, err := localesEnUsJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 4267, mode: os.FileMode(420), modTime: time.Unix(1478799057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJSON, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

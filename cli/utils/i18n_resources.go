// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x4d\x6f\x1b\x37\x10\xbd\xfb\x57\x0c\x7c\xd1\x45\x36\x9c\x5b\xd0\x4b\x61\xa4\x1f\x48\xe1\x36\x80\xed\x14\x28\x8a\x42\x18\xed\xce\xae\x18\x73\xc9\x2d\x3f\x2c\x08\x45\xff\x7b\x31\x24\x25\xad\x0a\x2d\xb9\x8e\x25\xe7\x62\xc0\xd2\xf0\xbd\xc7\x99\xc7\x8f\xa1\xfe\xbc\x00\xf8\xe7\x02\x00\xe0\x52\xd4\x97\xdf\xc1\x25\xf6\xfd\x42\x61\x47\x97\xf3\xf8\xa9\x33\xa8\xac\x44\x27\xb4\x0a\x5f\xbf\xbf\xbc\x00\xf8\x77\x7e\x6c\x98\xb7\xd8\x8e\x8d\xbb\xed\x50\xb6\xd8\xbd\x87\x0f\x77\x1f\xc7\x11\x9e\xc9\x58\x1e\x70\x1c\xe3\xe6\xfa\xe6\xfa\xdd\xf1\xc1\x35\x2d\x7d\x9b\x15\xf0\xb0\xd2\x6b\xb8\xff\xf1\xe1\x11\x2a\xdd\x75\x5e\x89\x2a\x7c\x05\x6b\xe1\x56\xb0\x57\xa7\x95\x33\x5a\x4a\x32\x80\x16\x84\x03\x61\xa1\x27\xd3\x68\xd3\x51\x7d\x7d\x9c\xfb\x8b\xd5\xaa\x4c\xad\xbd\xeb\xbd\x03\xa1\xe0\x97\x87\x4f\xbf\x01\x23\xa2\x3b\x0e\xb8\xc1\x4e\xbe\x04\xf0\x8f\xdb\x5f\xef\xb2\x80\x42\x3d\xa3\x14\xf5\xc2\x1b\x39\x82\xf8\x31\x46\xc0\xe7\xfb\x3b\xd0\x06\xa8\xeb\xdd\x66\x64\xba\x86\x5a\x61\x9d\xd9\x30\x5a\x56\xe5\x7d\x0a\x64\xd0\x02\x94\xd3\x4f\x94\xcf\xe1\x0e\xec\x91\x43\x8f\xc3\x55\xbb\xe2\x15\xb5\x0d\xea\x9c\x51\xf7\xb7\x27\xeb\x16\x95\xee\x7a\x49\x8e\xea\x51\x69\x21\x0e\x3e\xec\xe2\x46\x8a\xd0\xe8\xdc\xca\xe2\xef\x33\x23\x6b\xb2\x95\x11\xbd\x1b\x5f\x1e\xec\x0a\x0b\x1c\xcc\x4e\x60\x6f\xe3\x52\x7b\x07\x6e\x45\x50\x69\xd5\x88\xd6\x9b\xf8\xb9\x6e\xc2\x87\x1f\xee\x3e\x8e\xd4\x38\x30\x96\x1c\x78\x22\x2e\xe3\x25\x2d\x6a\xca\x66\xd8\x4b\x82\x1f\x28\x93\x5c\x4b\xe6\x59\x54\xb4\x90\xc2\xba\x5c\x92\x53\xdc\x15\xc7\x4d\x40\x2a\x27\xfd\x4e\x58\x07\x1d\x2a\x6c\xa9\x86\x4e\x54\x46\x27\x00\x3b\x32\xdd\x03\xfc\x5c\x8a\x5f\x87\x1c\x77\x87\x2c\xc1\xa7\xb8\x81\xc4\x12\x5e\xc3\x83\xef\x7b\x6d\x1c\xd5\xf0\x8c\xd2\x93\x05\x34\x04\x33\xde\xdc\x66\x73\x98\xf1\x9e\x34\xe3\xad\x61\xe6\x70\x29\x69\x36\x56\x4c\xed\x5d\xb9\x0a\x21\x2a\x53\x83\x01\xca\xd4\x0a\x0c\xf3\x03\xe9\x18\x01\xc6\x11\xaa\x05\xb6\xd8\x58\xd6\x06\x5c\xe5\x6a\x9c\x82\x65\x5b\xa6\x1c\xdb\xe3\x8a\x20\xc5\x01\xe7\xb1\x8c\xfa\x8d\xea\x8d\x15\xa3\x17\x0b\x1e\xc3\x32\x15\x1f\xe2\x4c\x2c\x79\x1c\x92\xcd\xfa\x10\xb5\x58\xdc\x17\xe2\x9d\xb0\x8c\x43\xd8\x6f\xb5\x6e\x79\x13\xae\x0c\xa1\xa3\xec\xc2\xf5\x92\xae\x62\x58\x19\x67\xc2\x89\x45\x2e\xe6\x9b\x27\x03\x78\xb0\xbe\x26\x08\xcd\x1e\x50\xaf\x83\x6e\x84\xcc\xe3\xdf\x13\xd6\x80\xf1\x2e\xa7\x4d\xba\x82\x09\x19\x4e\x3f\x87\x42\xf1\x86\x80\x30\x48\x01\x1f\x84\x51\x90\xd3\x10\x59\xae\x81\x51\x2c\x34\x46\x77\x60\x5d\x2d\x14\x2c\x37\x50\x53\x83\x5e\xba\x09\x22\x85\x62\xab\x18\xaa\x85\xa1\x68\xa1\xa2\xe2\x94\x12\x26\x44\x05\x01\x00\x06\x00\x39\x52\xdf\xd7\x53\xdc\x11\xc3\xca\x38\x65\x77\x7c\x0e\x81\x5f\x55\xc5\xc4\x91\x4b\xc7\xeb\xd1\xcf\xec\x91\xc8\xf2\xd5\x1e\x49\x22\xdf\xd6\x23\x2d\xe5\xcf\x7d\x36\x48\x4b\x63\xa7\xfe\x16\xa1\x6c\x8d\x9f\xbf\x72\x75\x33\x7a\x6e\xfe\xaf\xc1\xe5\xfe\xaa\x70\x16\x70\x2c\x88\xb1\x3e\x72\x87\xe4\x30\xdf\xca\xee\xa0\x1c\xb6\x25\xac\x9a\xac\x13\x0a\x8b\x95\xdf\x61\x0e\x06\x94\xb0\x4f\x7a\x56\x85\x33\x2a\x9c\x56\x25\x5a\x94\xf9\xde\x2e\x71\xa2\x94\xf9\x2b\xd9\xbe\xef\x28\x7a\x36\x86\x95\x71\x72\xb2\x62\xff\x72\xb0\xba\x26\xfb\x2b\xc1\x97\x17\xc6\x01\x49\x78\xda\xe0\xe6\xcb\xf6\x54\x89\x46\x50\xbd\x75\xe0\x9c\xad\x33\xe7\x94\x4f\x2c\x77\x12\x70\x1a\x8f\x27\xb0\x53\xd9\x7c\x9f\x9c\xb3\x38\x3d\xc1\x97\x5c\x77\xfb\x02\xbb\x31\x56\xa3\x4d\xe1\xf6\xf8\x13\x47\x40\x18\xb2\x7d\xa8\xe2\x16\x3b\xb4\xd7\xa9\xeb\x9e\xc8\x35\x1c\x32\x66\x1c\x0d\x1b\xed\xc1\x10\x4a\xb9\x81\x35\x2a\xc7\x67\x50\xc4\xd8\x2f\xa5\xef\x8f\xf3\x39\x83\x4d\x23\xaa\x85\x75\x68\xb2\x07\x40\x0a\xbc\x0a\x81\x53\xb0\x26\xdc\x21\x39\x0e\xc2\x87\x0d\x19\xc3\x67\x6a\x82\xe0\x09\x20\x28\x5a\xef\x3a\x35\xdd\x4c\x5b\x73\x87\x1a\xb2\xd7\xcc\xb3\xb3\x9f\xb0\xcf\x38\x04\x4e\xb2\x8a\xc0\xc3\x29\x38\xbd\x9d\xde\x24\x8a\x09\x07\xc4\x2d\xf4\x64\x2a\x52\x0e\x5b\x0a\x6f\x45\x29\x7b\x37\x57\xef\x6e\x6e\x98\xcf\x92\xaa\x03\xef\xa1\x94\x22\x3f\x65\x9f\xb1\xf7\x46\xa4\x7e\x02\xd2\x14\x1b\x52\x0f\xbe\x0f\x32\xb1\xd3\x5e\xb9\xe1\x6c\x4e\xe0\x05\xca\xbf\xaf\xbf\x05\xff\x59\xac\x48\xfd\x22\xea\xfd\x16\x36\xc1\xa5\x9e\xb6\x61\x85\xc0\x29\x58\x65\xa7\xdc\x72\xdc\x99\xb6\x8c\xa8\x21\x9b\xc8\xb3\xb3\x9f\xf2\x7d\x8b\x2a\xd1\xd3\xc2\x78\x95\xbd\xa1\x85\xa8\x2b\xe3\x47\x7e\x16\x18\xa0\x14\x5e\x0c\x7c\x0f\x08\x0d\x0a\xe9\x0d\x81\xad\x48\xa1\x11\x1a\x50\xd5\x80\xd6\x92\x71\xdb\x2d\x90\xac\x03\x6c\x51\x28\x1b\x5f\xbc\xb1\xef\x65\xfa\x3d\xa9\x3c\x93\x49\xcf\x22\x6f\xa2\xc4\xe9\x5e\x4b\xdd\x6e\x8a\xa5\x1a\xa0\xce\x2c\x48\xdd\x8a\x0a\x25\x6c\x87\x97\x89\xb6\x13\xb0\x45\xa6\xff\x4f\x79\xf4\x36\xb5\x07\xaf\x56\x54\x3d\xe5\x91\x7f\x47\x29\xea\xf0\x9f\x05\x4e\xdc\x8a\x60\x49\x2b\x7c\x16\xda\x6c\x7f\x9f\x38\x7c\xda\xad\x7d\x5c\x19\x7b\x45\x65\x1d\x52\x63\xbd\x88\xa5\xcd\xfb\x2c\x84\x70\xf5\x84\xfa\x42\x95\x8b\x45\xe4\xd1\x20\x54\xda\xc1\x5e\x54\xc6\x15\x61\x4d\x26\xcf\x19\x1a\x80\x4d\xc0\x4e\x3f\x6b\xf1\xb2\xaf\x9e\x78\x96\x71\x3c\x78\x4b\x35\x2c\x37\x2f\xe7\xef\xd1\x39\x32\xa5\xc5\x25\x79\xaa\x5a\xc9\xcd\x56\x80\x85\xf5\x4a\xdb\x71\x3d\x1d\xba\x6a\x45\x36\xe8\x49\x14\x65\x2d\x6f\xdc\x92\xee\x89\xd7\x28\xf2\xb4\x8f\xa2\x23\x2e\x3a\x07\xc2\x92\x1a\x6d\x08\x82\x75\xb7\x46\x33\x64\xbd\x74\x76\xa8\xc8\xf1\x18\xaf\x84\x4b\xaa\x3a\x3b\x9b\xc3\x2c\xfc\xe9\x26\x68\x2a\xb7\x18\x0f\x4f\x22\x5e\x19\x9e\x68\xb3\xd4\x68\xea\xf8\xdc\x13\xa1\x2f\xfe\xba\xf8\x2f\x00\x00\xff\xff\x24\xb2\x3b\x20\x1e\x20\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 8222, mode: os.FileMode(493), modTime: time.Unix(1481059892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

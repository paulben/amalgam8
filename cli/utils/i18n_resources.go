// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x98\xcf\x6f\xdb\x3a\x0c\xc7\xef\xf9\x2b\x88\x5c\x72\x49\x83\xbe\x5b\xf1\x2e\x0f\x45\xdf\x0f\xf4\x21\x5b\x81\xa4\x3b\x0c\xc3\x10\x28\x36\xed\x68\x93\x25\x4f\xa2\x52\x04\xc3\xfe\xf7\x81\x96\x93\xb8\x80\x2d\xb9\x6b\x86\x5e\x6d\xf2\x43\x86\x5f\x92\x92\xf3\x69\x02\xf0\x7d\x02\x00\x30\x95\xf9\xf4\x4f\x98\x8a\xba\xde\x68\x51\xe1\x74\x1e\x9e\x92\x15\xda\x29\x41\xd2\xe8\xe6\xf5\xcd\x74\x02\xf0\x63\xde\xe7\xe6\x9d\x28\x87\xfc\x6e\x2b\xa1\x4a\x51\xdd\xc0\xdd\xf2\x7e\x98\xb0\x47\xeb\xd8\xa1\x9f\x71\xbd\xb8\x5e\xfc\xd1\xe7\x3c\xcd\x71\xeb\xcb\x68\xfc\xf5\xce\x3c\xc1\xea\x9f\xf5\x23\x64\xa6\xaa\xbc\x96\x59\xf3\x0a\x9e\x24\xed\xe0\x9c\x9c\xd1\x64\x8d\x52\x68\x41\x38\x90\x04\xd2\x41\x8d\xb6\x30\xb6\xc2\x7c\xd1\x1b\xfa\x8b\x33\x3a\x1d\xd9\x78\xaa\x3d\x81\xd4\xf0\xff\xfa\xe1\x3d\x30\x50\x50\x2f\xef\x20\x2a\xf5\x12\xde\xc7\xdb\x77\xcb\x18\x4f\xea\xbd\x50\x32\xdf\x78\xab\x06\x80\xf7\xc1\x02\x3e\xac\x96\x60\x2c\x60\x55\xd3\xa1\xff\xb7\x5a\x2c\xa5\x23\x7b\x60\x58\x34\xc7\x55\x6b\xc8\xcc\x38\x89\xcc\x57\x8c\xd7\xef\xc4\x7a\x64\xd3\x5e\x5a\x76\x92\x2d\x99\x59\x47\xe1\xe1\xdc\xbe\x79\x74\xb4\xc9\x4c\x55\x2b\x24\xcc\x07\x13\x6b\xec\xe0\xee\x64\xd7\xdb\xd7\x52\x17\x26\x36\x51\xfc\x3e\xe2\x99\xa3\xcb\xac\xac\x69\x78\x2c\xb8\x21\x1c\xb0\x31\x37\x01\x37\xb5\xd8\x1a\x4f\x40\x3b\x84\xcc\xe8\x42\x96\xde\x86\xe7\xa6\x68\x1e\xde\x2d\xef\x7b\xf5\x6d\x23\xa6\x9a\xef\x22\xb1\xa6\xd6\x2b\xdc\xe4\x18\x2d\xb0\x57\x08\x7f\x63\xa4\xb6\x0e\xed\x5e\x66\xb8\x51\xd2\x51\xac\xc6\xad\xdd\x15\xdb\x8d\x20\xa5\x6b\xbe\x94\x8e\xa0\x12\x5a\x94\x98\x43\x25\x33\x6b\x5a\x80\x1b\xa8\xec\x33\x7e\xac\xc2\xaf\x23\x87\xbd\x10\x0d\xf0\x10\x56\x47\x50\x70\x01\x6b\x5f\xd7\xc6\x12\xe6\xb0\x17\xca\xa3\x03\x61\x11\x66\xbc\xd5\x66\x73\x98\xf1\x36\x9a\xf1\x56\x98\x91\xd8\x2a\x9c\x0d\xe4\x60\x8d\xa7\xb4\x0a\x8d\x55\x44\x83\x0e\x65\xac\x02\xdd\xfa\x40\x7b\x7a\x00\x73\xa4\x2e\x81\x5b\x6c\xa8\x6a\x9d\x58\x69\x35\x2e\x11\xe5\x28\x53\x2c\xda\xe3\x0e\xa1\xb5\x03\xae\x63\x9a\xfa\x46\x7a\x8b\x8c\xe9\x49\xc1\x83\x59\x44\xf1\x2e\x67\xa4\xe4\xc1\x25\x5a\xf5\x2e\x35\x29\xee\x0b\x79\x17\x94\xb1\x8b\x7d\xab\xb9\xe5\x25\x9c\x59\x14\x84\xd1\xc1\xf5\x0a\xaf\x82\x59\x9a\x33\xe2\xc0\x42\x0a\xf5\xe6\x1f\x03\xe2\xd9\x7c\x8d\x48\x34\x7a\x3e\xbd\x0e\x5d\x48\x15\xe7\xaf\x50\xe4\x20\xc2\x25\xce\xd8\xf6\xf2\x25\x55\x73\xf8\x91\x90\x9a\x17\x82\x80\x4e\x09\xf8\x1c\x0c\x09\x91\x81\x10\x65\x01\x4c\x71\x50\x58\x53\x81\xa3\x5c\x6a\xd8\x1e\x20\xc7\x42\x78\x45\xb1\x24\x4b\x8c\xaf\x57\x56\xa9\xc4\xa1\xe5\x7a\x24\xa4\xf5\xf9\xef\x17\x8b\xc8\xf4\x58\xf1\x5e\xc3\xe5\x1b\x6c\x62\xe4\xd8\x16\x64\xff\x35\xbd\x43\x22\x11\xff\x52\x38\xa1\x48\x94\x29\x56\x8e\x8e\xa4\x6e\x5c\xc7\x31\x3b\x0e\x29\xf6\x45\x57\x42\xb3\x0a\x9a\xa5\x90\x0a\x2b\x54\xfc\x02\xdd\xc6\x14\x4a\xc5\x4f\xbe\xf3\xf5\x2e\xd9\xb3\xc1\x2c\xcd\x89\xa5\x15\xae\x89\xc7\xf6\xe2\xc9\x1a\xdf\x5f\x2d\x3e\x3d\x18\xcf\x82\x34\x5f\x8e\x7c\xc5\x75\x35\x66\xb2\x90\x98\x1f\x3b\x70\xce\xad\x33\xe7\x92\x8f\x94\xbb\x4d\xe0\x32\x3d\xde\xc2\x2e\xd5\xe6\xe7\xe2\xfc\x96\x4e\x6f\xf1\xa9\xae\xbb\x7d\x41\xbb\x31\xab\x30\x36\x71\x48\xff\xcb\x16\xd0\xb8\x1c\xff\x07\xe0\x0f\x99\xe6\x23\xa6\xfd\xb6\x19\x19\xab\xeb\x32\xd4\x38\x06\x0e\xc6\x83\x45\xa1\xd4\x01\x9e\x84\x26\x3e\x0e\x02\xe3\x3c\x4a\x7f\x35\xf1\x26\x9f\x27\x3f\x03\x00\x00\xff\xff\x51\x0f\x12\x60\x95\x11\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 4501, mode: os.FileMode(509), modTime: time.Unix(1479331532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

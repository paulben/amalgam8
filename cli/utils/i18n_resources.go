// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x72\xf1\xc5\x09\xb2\xb7\x45\x2f\x45\xb0\xfd\xc0\x16\x69\x17\x48\xd2\x02\x45\x51\x18\x63\x69\x24\x73\x43\x91\x2a\x3f\x62\x18\x45\xff\x7b\x31\x24\x65\xcb\x85\x45\x2a\x5d\x67\x73\x59\x60\xe5\x99\xf7\x1e\x67\x86\x43\x0e\xf3\xc7\x05\xc0\xdf\x17\x00\x00\x97\xa2\xbe\xfc\x06\x2e\xb1\xef\x57\x0a\x3b\xba\x5c\xc6\xaf\xce\xa0\xb2\x12\x9d\xd0\x2a\xfc\xfc\xfe\xf2\x02\xe0\x9f\xe5\x29\x37\x6f\xb1\x9d\xf2\xbb\xed\x50\xb6\xd8\xbd\x87\x0f\x77\x1f\xa7\x11\x9e\xc9\x58\x76\x38\x8d\x71\x73\x7d\x73\xfd\xee\xb4\x73\x4d\x6b\xdf\x66\x05\x3c\x6c\xf4\x16\xee\xbf\x7f\x78\x84\x4a\x77\x9d\x57\xa2\x0a\x3f\xc1\x56\xb8\x0d\x1c\xd4\x69\xe5\x8c\x96\x92\x0c\xa0\x05\xe1\x40\x58\xe8\xc9\x34\xda\x74\x54\x5f\x9f\xe6\xfe\x6c\xb5\x2a\x53\x6b\xef\x7a\xef\x40\x28\xf8\xe9\xe1\xd3\x2f\xc0\x88\xe8\x4e\x03\xee\xb0\x93\x2f\x01\xfc\xfd\xf6\xe7\xbb\x2c\xa0\x50\xcf\x28\x45\xbd\xf2\x46\x4e\x20\x7e\x8c\x16\xf0\xeb\xfd\x1d\x68\x03\xd4\xf5\x6e\x37\xb1\x5c\x43\xad\xb0\xce\xec\x18\x2d\xab\xf2\x3e\x19\x32\x68\x01\xca\xe9\x27\xca\xc7\x70\x0f\xf6\xc8\xa6\xa7\xe1\xaa\x7d\xf2\x8a\xda\x46\x79\xce\xa8\xfb\xcb\x93\x75\xab\x4a\x77\xbd\x24\x47\xf5\xa4\xb4\x60\x07\x1f\xf6\x76\x13\x49\x68\x74\x6e\x67\xf1\xef\x19\xcf\x9a\x6c\x65\x44\xef\xa6\xb7\x07\x57\x85\x05\x36\xe6\x4a\xe0\xda\xc6\xb5\xf6\x0e\xdc\x86\xa0\xd2\xaa\x11\xad\x37\xf1\xbb\x6e\xc2\xc7\x0f\x77\x1f\x27\x72\x1c\x18\x4b\x15\x78\x26\x2e\xe3\x25\xad\x6a\xca\x46\xd8\x4b\x82\xef\x28\x13\x5c\x4b\xe6\x59\x54\xb4\x92\xc2\xba\x5c\x90\x93\xdd\x15\xdb\xcd\x40\x2a\x07\xfd\x4e\x58\x07\x1d\x2a\x6c\xa9\x86\x4e\x54\x46\x27\x00\x3b\xb1\xdc\x23\xfc\x5c\x88\xbf\x0c\x39\x76\x87\x2c\xc1\xa7\xd8\x40\x62\x0a\xaf\xe1\xc1\xf7\xbd\x36\x8e\x6a\x78\x46\xe9\xc9\x02\x1a\x82\x05\x37\xb7\xc5\x12\x16\xdc\x93\x16\xdc\x1a\x16\x0e\xd7\x92\x16\x53\xc9\xd4\xde\x95\xb3\x10\xac\x32\x39\x18\xa1\xcc\xcd\xc0\x38\x3e\x90\x8e\x11\x60\x1c\xa1\x5a\xe0\x12\x9b\x8a\xda\x88\xab\x9c\x8d\x73\xb0\x0c\x69\xca\xb1\x3d\x6e\x08\x92\x1d\x70\x1c\xcb\xa8\x6f\x94\x6f\xac\x18\xbd\x98\xf0\x68\x96\xc9\xf8\x18\x67\x66\xca\xa3\x4b\x36\xea\x63\xd4\x62\x72\x5f\x88\x77\xc6\x34\x8e\x61\xdf\x6a\xdf\x72\x13\xae\x0c\xa1\xa3\xec\xc6\xf5\x92\xae\xa2\x59\x19\x67\xc6\x89\x45\x2e\xc6\x9b\x17\x03\x78\xb4\xbf\x66\x08\xcd\x1e\x50\x5f\x06\xdd\x08\x99\xc7\xbf\x27\xac\x01\xe3\x5d\x4e\x9b\x74\x05\x13\x32\x9c\x7e\x0e\x85\xe2\x86\x80\x30\x0a\x01\x1f\x84\x51\x90\xd3\x10\x59\xae\x81\x51\x2c\x34\x46\x77\x60\x5d\x2d\x14\xac\x77\x50\x53\x83\x5e\xba\x9c\xc8\x96\xf2\xed\x95\xb3\xd4\xd2\x54\x73\x1d\x10\xca\xf9\xf9\xf1\x7f\x06\x91\xd1\x73\xc1\xfb\x12\x5c\xbe\xc6\x16\xb6\x1c\xdb\x82\x98\xba\xae\xef\x91\x1c\xe6\x27\x86\x3d\x94\xc3\xb6\x84\x55\x93\x75\x42\x05\xd7\x79\x98\x23\x87\x12\xf6\x59\x5b\x42\x68\x05\xa1\x29\x94\x68\x51\xe6\xaf\xd0\x89\x13\xa5\xcc\x9f\x7c\x87\xeb\x5d\xb1\x66\xa3\x59\x19\x27\x27\x2b\x5e\x13\x87\xf2\xe2\x9d\x35\xbf\xbe\x12\x7c\x79\x63\x1c\x91\x84\x09\x92\xef\xb8\xb6\xa7\x4a\x34\x82\xea\xa1\x02\x97\x5c\x3a\x4b\x0e\xf9\xcc\x74\x27\x01\xe7\xa9\xf1\x04\x76\xae\x32\x3f\x04\xe7\x55\x2a\x3d\xc1\x97\xaa\xee\xf6\x05\xe5\xc6\x58\x8d\x36\x85\x43\xfa\x07\xb6\x80\xe0\x32\xbc\x07\xf0\x24\x13\xa6\x98\x34\xdc\xcc\xe4\x1a\xbb\x4c\x15\x8e\x86\x9d\xf6\x60\x08\xa5\xdc\xc1\x16\x95\xe3\xe3\x20\x62\x1c\xb6\xd2\xb7\xa7\xf9\x9c\xc1\xa6\x11\xd5\xca\x3a\x34\xd9\x03\x20\x19\x5e\x05\xc3\x39\x58\x33\x8e\x6a\xb6\x83\xf0\xb1\x21\x63\xf8\x78\x4b\x10\xbc\x00\x04\x45\xdb\xfd\x85\x58\x37\xf3\xf6\xdc\xb1\x86\xec\x69\xfe\xea\xec\x67\xbc\xce\x1d\x03\x27\x59\x45\xe0\xf1\x12\x9c\x1e\x96\x37\x8b\x62\xc6\x01\x71\x0b\x3d\x99\x8a\x94\xc3\x96\xc2\x48\x9e\xa2\x77\x73\xf5\xee\xe6\x86\xf9\x2c\xa9\x3a\xf0\x1e\x4b\x29\xf2\x53\xf6\xb5\xf0\x50\x88\xd4\xcf\x40\x9a\x53\x86\xd4\x83\xef\x83\x4c\xec\xb4\x57\x6e\xbc\x9a\x33\xd4\x02\xe5\x9f\x31\xbf\x06\xff\xab\x94\x22\xf5\xab\xa8\xf7\x2d\xca\x04\xd7\x7a\x5e\xc3\x0a\x86\x73\xb0\xca\x95\x72\xcb\x76\xaf\xd4\x32\xa2\x86\x6c\x20\x5f\x9d\xfd\x9c\xcf\x08\x54\x89\x9e\x56\xc6\xab\xec\x0d\x2d\x58\x5d\x19\x3f\xf1\xfa\x3a\x42\x29\x0c\x66\xbe\x07\x84\x06\x85\xf4\x86\xc0\x56\xa4\xd0\x08\x0d\xa8\x6a\x40\x6b\xc9\xb8\xa1\x05\x12\x4f\xe5\x2d\x0a\x65\xe3\xc3\x22\xf6\xbd\x4c\xcf\xf6\xe5\x95\xcc\x9a\x3e\xbf\x8a\x12\xa7\x7b\x2d\x75\xbb\x2b\xa6\x6a\x84\xba\xb0\x20\x75\x2b\x2a\x94\x30\xb8\x97\x89\x86\x05\xd8\x22\xd3\x7f\x97\x3c\x79\x9b\x3a\x80\x57\x1b\xaa\x9e\xf2\xc8\xbf\xa1\x14\x75\xf8\x9f\x05\x0e\xdc\x86\x60\x4d\x1b\x7c\x16\xda\x0c\xcf\xc0\xc7\x2f\x68\xb5\x8f\x3b\xe3\xa0\xa8\xac\x43\x6a\xac\x57\x31\xb5\xf9\x3a\x0b\x26\x9c\x3d\xa1\x3e\x53\xe5\x62\x12\xd9\x1b\x84\x4a\x1d\xec\x45\x69\xdc\x10\xd6\x64\xf2\x9c\x61\x00\xd8\x05\xec\xf4\xd7\x03\xde\xf6\xd5\x13\xaf\x32\xfa\x83\xb7\x54\xf3\x98\xff\x62\xfe\x1e\x9d\x23\x53\xda\x5c\x92\x97\xaa\x95\xdc\x0d\x02\x2c\x6c\x37\xda\x4e\xeb\xe9\xd0\x55\x1b\xb2\x41\x4f\xa2\x28\x6b\xf9\xca\x23\xe9\x81\x78\x8b\x22\x4f\xfb\x28\x3a\xe2\xa4\xb3\x21\xac\xa9\xd1\x86\x20\x94\xee\x50\x68\x86\xac\x97\xce\x8e\x15\x39\xf6\xf1\x4a\xb8\xa4\xaa\xb3\x8b\x25\x2c\xc2\x3f\xdd\x0c\x4d\xe5\x11\xe3\xe1\x49\xc4\x2b\xc3\x13\xed\xd6\x1a\x0d\x97\x60\xef\xd3\x13\xcf\xc5\x9f\x17\xff\x06\x00\x00\xff\xff\x5f\x69\xee\x28\x85\x1d\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 7557, mode: os.FileMode(493), modTime: time.Unix(1480702038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x72\xf1\xc5\x09\xb2\xb7\x45\x2f\x45\x90\x7e\x20\x45\xda\x05\x92\x6c\x81\xa2\x28\x8c\xb1\x34\x92\xb9\xa1\x48\x95\x1f\x31\x8c\xa2\xff\xbd\x18\x52\xb2\xe5\xc2\x22\x95\xc4\x4e\x2e\x0b\xac\x3c\xf3\xde\x70\xde\x70\xc8\x61\xfe\x3c\x03\xf8\xe7\x0c\x00\xe0\x5c\x94\xe7\xdf\xc1\x39\xb6\xed\x42\x61\x43\xe7\xf3\xf8\xd5\x19\x54\x56\xa2\x13\x5a\x85\x9f\x3f\x9f\x9f\x01\xfc\x3b\x3f\xe4\xe6\x2d\xd6\x63\x7e\xd7\x0d\xca\x1a\x9b\xcf\x70\x73\x77\x3b\x8e\xf0\x4c\xc6\xb2\xc3\x61\x8c\xab\xcb\xab\xcb\x4f\x87\x9d\x4b\x5a\xfa\x3a\x19\xc0\xc3\x4a\xaf\xe1\xfe\xc7\x87\x47\x28\x74\xd3\x78\x25\x8a\xf0\x13\xac\x85\x5b\xc1\x2e\x3a\xad\x9c\xd1\x52\x92\x01\xb4\x20\x1c\x08\x0b\x2d\x99\x4a\x9b\x86\xca\xcb\xc3\xdc\xdf\xac\x56\x79\x6a\xed\x5d\xeb\x1d\x08\x05\xbf\x3c\x7c\xf9\x0d\x18\x11\xdd\x61\xc0\x0d\x36\xf2\x25\x80\x7f\x5c\xff\x7a\x97\x04\x14\xea\x19\xa5\x28\x17\xde\xc8\x11\xc4\xdb\x68\x01\x5f\xef\xef\x40\x1b\xa0\xa6\x75\x9b\x91\xe5\x1a\xaa\x85\x75\x66\xc3\x68\xc9\x28\xef\x3b\x43\x06\xcd\x40\x39\xfd\x44\xe9\x1c\x6e\xc1\x1e\xd9\xf4\x30\x5c\xb1\x15\x2f\x1b\xdb\x40\xe7\x44\x74\x7f\x7b\xb2\x6e\x51\xe8\xa6\x95\xe4\xa8\x1c\x0d\x2d\xd8\xc1\xcd\xd6\x6e\x44\x84\x4a\xa7\x76\x16\xff\x9e\xf0\x2c\xc9\x16\x46\xb4\x6e\x7c\x7b\x70\x55\x58\x60\x63\xae\x04\xae\x6d\x5c\x6a\xef\xc0\xad\x08\x0a\xad\x2a\x51\x7b\x13\xbf\xeb\x2a\x7c\xbc\xb9\xbb\x1d\xd1\x38\x30\xe6\x2a\xf0\x48\x5c\xc6\x4b\x5a\x94\x94\xcc\xb0\x97\x04\x3f\x50\x22\xb9\x96\xcc\xb3\x28\x68\x21\x85\x75\xa9\x24\x77\x76\x17\x6c\x37\x01\x29\x9f\xf4\x3b\x61\x1d\x34\xa8\xb0\xa6\x12\x1a\x51\x18\xdd\x01\xd8\x91\xe5\xee\xe1\xa7\x52\xfc\x36\xe4\xd8\x1d\x92\x04\x5f\x62\x03\x89\x12\x5e\xc2\x83\x6f\x5b\x6d\x1c\x95\xf0\x8c\xd2\x93\x05\x34\x04\x33\x6e\x6e\xb3\x39\xcc\xb8\x27\xcd\xb8\x35\xcc\x1c\x2e\x25\xcd\xc6\xc4\xd4\xde\xe5\x55\x08\x56\x09\x0d\x06\x28\x53\x15\x18\xe6\x07\xba\x63\x04\x18\x47\xa8\x1a\xb8\xc4\xc6\xb2\x36\xe0\xca\xab\x71\x0c\x96\x5e\xa6\x14\xdb\xe3\x8a\xa0\xb3\x03\xce\x63\x1e\xf5\x83\xf4\xc6\x82\xd1\xb3\x82\x47\xb3\x84\xe2\x43\x9c\x89\x92\x47\x97\x64\xd6\x87\xa8\x59\x71\x5f\x88\x77\x44\x19\x87\xb0\x1f\xb5\x6f\xb9\x09\x17\x86\xd0\x51\x72\xe3\x7a\x49\x17\xd1\x2c\x8f\x33\xe1\xc4\x22\x17\xf3\xcd\x8b\x01\xdc\xdb\x5f\x13\x02\x4d\x1e\x50\x6f\x83\xae\x84\x4c\xe3\xdf\x13\x96\x80\xf1\x2e\xa7\x4d\x77\x05\x13\x32\x9c\x7e\x0e\x85\xe2\x86\x80\x30\x48\x01\x1f\x84\x31\x20\xa7\x21\xb2\x5c\x02\xa3\x58\xa8\x8c\x6e\xc0\xba\x52\x28\x58\x6e\xa0\xa4\x0a\xbd\x74\xa9\x20\x7d\x5b\x4e\x11\x2a\x9a\xe5\x71\xf2\x42\x7d\x0d\x86\xaf\x4a\x68\xc7\x91\xca\xe5\xdb\xd1\x4f\x2c\x57\x64\x79\xb5\x5c\x35\xa5\x4f\x43\xd6\xaa\xa6\xb1\xb3\xb0\x47\xc8\xab\xf4\xf3\x2b\x6b\x9e\xd1\x53\xc9\x7b\x0b\x2e\x4f\x1d\x99\x0e\xc9\xb6\x20\xc6\xa6\xab\x2d\x92\xc3\xf4\x80\xb7\x85\x72\x58\xe7\xb0\x4a\xb2\x4e\xa8\xe0\x3a\x0d\x73\xe0\x90\xc3\x3e\x6a\x07\x0f\x9d\x3b\xf4\xf0\x1c\x2d\xca\xf4\xc4\xd3\x71\xa2\x94\xe9\x8b\xca\xee\x36\x9e\xad\xd9\x68\x96\xc7\x49\x85\x15\x6f\xf5\x7d\x79\xf1\xce\x9a\x5e\x5f\x1d\x7c\x7e\x63\xec\x91\x84\x81\x9f\x47\x12\xdb\x52\x21\x2a\x41\x65\x5f\x81\x73\x2e\x9d\x39\xa7\x7c\xa2\xdc\x5d\x00\xc7\xa9\xf1\x0e\xec\x58\x65\xbe\x4b\xce\x49\x2a\xbd\x83\xcf\x55\xdd\xf5\x0b\xca\x8d\xb1\x2a\x6d\x32\x77\xaa\x9f\xd8\x02\x82\x4b\xff\x7c\xc3\x83\x67\x18\x3a\xbb\x59\x74\x22\xd7\xd0\x65\xac\x70\x34\x6c\xb4\x07\x43\x28\xe5\x06\xd6\xa8\x1c\x1f\x07\x11\x63\xb7\x95\xbe\x3f\xcc\xe7\x0c\x56\x95\x28\x16\xd6\xa1\x49\x1e\x00\x9d\xe1\x45\x30\x9c\x82\x35\xe1\x66\xc5\x76\x10\x3e\x56\x64\x0c\x1f\x6f\x1d\x04\x2f\x00\x41\xd1\x7a\x3b\xbf\xe8\x6a\xda\x9e\xdb\x8f\x21\x79\xf9\x3a\x39\xfb\x11\x6f\xdf\xfb\xc0\x5d\x58\x59\xe0\xe1\x12\x9c\xee\x97\x37\x89\x62\xc2\x01\x71\x0d\x2d\x99\x82\x94\xc3\x9a\xc2\x0b\x4a\x97\xbd\xab\x8b\x4f\x57\x57\xcc\x67\x49\x95\x81\x77\x3f\x94\x2c\x3f\x25\x1f\x77\x77\x85\x48\xed\x04\xa4\x29\x65\x48\x2d\xf8\x36\x84\x89\x8d\xf6\xca\x0d\x57\x73\x84\x5a\xa0\xf4\xab\xf3\x7b\xf0\x9f\xa4\x14\xa9\x5d\xc4\x78\x3f\xa2\x4c\x70\xa9\xa7\x35\xac\x60\x38\x05\x2b\x5f\x29\xd7\x6c\x77\xa2\x96\x11\x63\x48\x26\xf2\xe4\xec\xc7\x7c\xf5\xa1\x42\xb4\xb4\x30\x5e\x25\x6f\x68\xc1\xea\xc2\xf8\x91\xc7\xf2\x01\x4a\x66\x8e\xf6\x2d\x20\x54\x28\xa4\x37\x04\xb6\x20\x85\x46\x68\x40\x55\x02\x5a\x4b\xc6\xf5\x2d\x90\xac\x03\xac\x51\x28\x1b\xdf\x81\xb1\x6d\x65\xf7\x57\x96\xfc\x4a\x26\x3d\x16\xbc\x4b\x24\x4e\xb7\x5a\xea\x7a\x93\x95\x6a\x80\x3a\xb3\x20\x75\x2d\x0a\x94\xd0\xbb\xe7\x89\xfa\x05\xd8\x2c\xd3\xff\x97\x3c\x7a\x9b\xda\x81\x17\x2b\x2a\x9e\xd2\xc8\xbf\xa3\x14\x65\xf8\x9f\x05\x4e\xdc\x8a\x60\x49\x2b\x7c\x16\xda\xf4\xaf\xf6\xfb\x0f\x9e\xa5\x8f\x3b\x63\x17\x51\x3e\x0e\xa9\xb1\x5c\x44\x69\xd3\x75\x16\x4c\x58\x3d\xa1\xbe\x51\xe1\xa2\x88\xec\x0d\x42\x75\x1d\xec\x45\x32\xae\x08\x4b\x32\x69\xce\x30\x00\x6c\x02\x76\xf7\xc7\x1e\xde\xf6\xc5\x13\xaf\x32\xfa\x83\xb7\x54\xf2\x98\xff\x62\xfe\x16\x9d\x23\x93\xdb\x5c\x92\x97\xaa\x95\xdc\xf4\x01\x58\x58\xaf\xb4\x1d\x8f\xa7\x41\x57\xac\xc8\x86\x78\x3a\x8a\x7c\x2c\xef\x3c\x92\xee\x88\xd7\x28\xd2\xb4\x8f\xa2\x21\x16\x9d\x0d\x61\x49\x95\x36\x04\xa1\x74\xfb\x42\x33\x64\xbd\x74\x76\x18\x91\x63\x1f\xaf\x84\xeb\xa2\x6a\xec\x6c\x0e\xb3\xf0\x4f\x33\x21\xa6\xfc\x88\xf1\xf0\x24\xe2\x95\xe1\x89\x36\x4b\x8d\x86\x4b\xb0\xf5\xdd\x13\xcf\xd9\x5f\x67\xff\x05\x00\x00\xff\xff\xa0\xd6\xd0\x5d\x34\x1f\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 7988, mode: os.FileMode(493), modTime: time.Unix(1481038075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

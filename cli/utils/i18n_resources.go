// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x98\xcf\x6f\xeb\x36\x0c\xc7\xef\xf9\x2b\x88\x5c\xb2\x01\x69\x90\xde\x1e\x76\x19\x82\xee\x07\x3a\x64\x7b\x40\xdb\x1d\x86\x61\x08\x18\x9b\x76\xb5\xc9\x92\xa7\x1f\x2d\x82\x61\xff\xfb\x40\xd9\x49\x9c\x21\x96\xd4\xd7\xe4\xbd\xab\x43\x7d\x48\x91\x5f\x91\x52\x7e\x9f\x00\xfc\x33\x01\x00\x98\x8a\x72\xfa\x0d\x4c\xb1\x6d\x37\x0a\x1b\x9a\xce\xbb\xaf\xce\xa0\xb2\x12\x9d\xd0\x2a\xfc\xfc\x61\x3a\x01\xf8\x77\x7e\x6e\x99\xb7\x58\x8f\xad\x5b\x35\x28\x6b\x6c\x3e\xc0\xdd\xfa\x7e\x9c\xf0\x42\xc6\xf2\x82\xf3\x8c\xe5\x62\xb9\xb8\x3d\xbf\xb8\xa4\xad\xaf\xa3\x01\x3c\x3e\xeb\x57\x78\xf8\xfe\xf1\x09\x0a\xdd\x34\x5e\x89\x22\xfc\x04\xaf\xc2\x3d\xc3\x31\x3a\xad\x9c\xd1\x52\x92\x01\xb4\x20\x1c\x08\x0b\x2d\x99\x4a\x9b\x86\xca\xc5\x79\xdf\x7f\x5a\xad\xd2\xae\xb5\x77\xad\x77\x20\x14\xfc\xf4\xf8\xf1\x17\x60\x22\xba\xf3\xc0\x1d\x36\xf2\x2d\xc0\xdf\x56\x3f\xaf\xa3\x40\xa1\x5e\x50\x8a\x72\xe3\x8d\x1c\x21\xde\x77\x16\xf0\xeb\xc3\x1a\xb4\x01\x6a\x5a\xb7\x1b\xd9\xae\xa1\x5a\x58\x67\x76\x4c\x8b\x46\xf9\xd0\x1b\x32\x34\x81\x72\xfa\x2f\x8a\xe7\xf0\x00\x7b\x62\xd3\xf3\xb8\xe2\x50\xbc\x64\x6c\x83\x3a\x47\xa2\xfb\xdb\x93\x75\x9b\x42\x37\xad\x24\x47\xe5\x68\x68\xc1\x0e\xee\x0e\x76\x23\x45\xa8\x74\xec\x64\xf1\xef\x91\x95\x25\xd9\xc2\x88\xd6\x8d\x1f\x0f\x56\x85\x05\x36\x66\x25\xb0\xb6\x71\xab\xbd\x03\xf7\x4c\x50\x68\x55\x89\xda\x9b\xee\xbb\xae\xc2\xc7\xbb\xf5\xfd\x48\x8d\x83\xc7\x94\x02\x2f\xe4\xcb\x78\x49\x9b\x92\xa2\x19\xf6\x92\xe0\x3b\x8a\x24\xd7\x92\x79\x11\x05\x6d\xa4\xb0\x2e\x96\xe4\xde\xee\x86\xed\x32\x48\xe9\xa4\xaf\x85\x75\xd0\xa0\xc2\x9a\x4a\x68\x44\x61\x74\x0f\xb0\x23\xdb\x3d\xe1\xc7\x52\xfc\x3e\x72\xd7\x1d\xa2\x0e\x3e\x76\x0d\xa4\x2b\xe1\x02\x1e\x7d\xdb\x6a\xe3\xa8\x84\x17\x94\x9e\x2c\xa0\x21\x98\x71\x73\x9b\xcd\x61\xc6\x3d\x69\xc6\xad\x61\xe6\x70\x2b\x69\x36\x56\x4c\xed\x5d\xba\x0a\xc1\x2a\x52\x83\x01\x25\xb7\x02\xc3\xfc\x40\x3f\x46\x80\x39\x42\xd5\xc0\x12\x1b\xcb\xda\xc0\x57\xba\x1a\x97\xf0\xb2\x2f\x53\xcc\xdb\xd3\x33\x41\x6f\x07\x9c\xc7\x34\xf5\x0b\xd5\x1b\x0b\xa6\x27\x0b\xde\x99\x45\x2a\x3e\xe4\x64\x96\xbc\x5b\x12\xcd\xfa\x90\x9a\x2c\xee\x1b\x79\x17\x2c\xe3\x10\xfb\xa5\xce\x2d\x37\xe1\xc2\x10\x3a\x8a\x1e\x5c\x2f\xe9\xa6\x33\x4b\x73\x32\x26\x16\xb9\x2e\xdf\xbc\x19\xc0\x93\xf3\x95\x11\x68\x74\x40\xbd\x0f\x5d\x09\x19\xe7\x3f\x10\x96\x80\xdd\x5d\x4e\x9b\xfe\x0a\x26\x64\x98\x7e\x0e\x85\xe2\x86\x80\x30\x48\x01\x0f\xc2\x2e\x20\xa7\xa1\xf3\xb2\x00\xa6\x58\xa8\x8c\x6e\xc0\xba\x52\x28\xd8\xee\xa0\xa4\x0a\xbd\x74\xb1\x20\x6b\x8a\xb7\x57\xae\x52\x4d\x63\xcd\x75\x4f\x48\xd7\xe7\xc7\x4f\x4c\x22\xd3\x63\xc9\x7b\x0f\x97\xaf\xb1\x89\x23\xc7\xb6\x20\xc6\xae\xeb\x07\x92\xc3\xf8\x8b\xe1\x80\x72\x58\xa7\x58\x25\x59\x27\x54\x58\x9a\xc7\x1c\x2c\x48\xb1\x2f\xda\x12\x42\x2b\x08\x4d\x21\xe5\x16\x65\xfc\x0a\xdd\xfb\x44\x29\xe3\x93\xef\x78\xbd\x4b\x6a\xb6\x33\x4b\x73\x62\x61\x75\xd7\xc4\xbd\xbc\xf8\x64\xe5\xeb\xab\xc7\xa7\x0f\xc6\x89\x93\xf0\x82\xe4\x3b\xae\x6d\xa9\x10\x95\xa0\x72\xaf\xc0\x39\x4b\x67\xce\x29\xcf\x2c\x77\x1f\xc0\x65\x34\xde\xc3\x2e\x25\xf3\x63\x72\xae\xa2\xf4\x1e\x9f\x52\xdd\xea\x0d\x72\x63\x56\xa5\x4d\x62\x48\xff\xc0\x16\x10\x96\xec\xff\x0f\xe0\x97\x4c\x78\xc5\xf4\x8f\x9b\x4c\x5f\xc3\x25\x63\xc2\xd1\xb0\xd3\x1e\x0c\xa1\x94\x3b\x78\x45\xe5\x78\x1c\x74\x8c\xe3\x51\xfa\xf6\xbc\x3f\x67\xb0\xaa\x44\xb1\xb1\x0e\x4d\x74\x00\xf4\x86\x37\xc1\x30\x87\x95\x31\xaa\xd9\x0e\xc2\xc7\x8a\x8c\xe1\xf1\xd6\x23\x78\x03\x08\x8a\x5e\x0f\x17\x62\x5d\xe5\x9d\xb9\xd3\x18\xa2\xd3\xfc\xea\xde\x2f\x78\x9d\x3b\x05\xf7\x61\x25\xc1\xc3\x2d\x38\xbd\xdf\x5e\x96\x8b\x8c\x01\xb1\x82\x96\x4c\x41\xca\x61\x4d\xe1\x49\xde\x67\x6f\x79\x73\xbb\x5c\xb2\x3f\x4b\xaa\x0c\x7e\xff\x17\xca\x57\xfd\x75\x04\x84\x85\xdb\xe5\x9e\xf2\x75\x32\x2e\x8a\xfe\x8b\x78\x14\x28\xb5\x19\xa4\x1c\x79\x52\x0b\xbe\x0d\xe1\x63\xa3\xbd\x72\xc3\x5d\x5e\x40\x23\x14\xff\x7b\xf3\x73\xf8\xbf\x8a\x44\xa9\xdd\x74\xf1\x5e\x45\x3e\x09\xf7\xb8\xd5\x79\x8d\x2c\x18\xe6\xb0\xd2\x4a\x59\xb1\xdd\x95\x5a\x49\x17\x43\x34\x91\x57\xf7\xfe\xe9\x2a\x99\xfc\x31\xf9\x2f\x00\x00\xff\xff\xe4\x09\xba\xb9\x0e\x18\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 6158, mode: os.FileMode(493), modTime: time.Unix(1480631786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

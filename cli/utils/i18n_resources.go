// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x98\xcf\x6e\xe3\x36\x10\xc6\xef\x7e\x8a\x81\x2f\x6e\x01\xc7\xf0\xde\x16\xbd\x14\x41\xfa\x07\x29\xdc\x2e\x90\xa4\x87\xa2\x28\x8c\x89\x34\x52\xd8\x52\xa4\x4a\x8e\x12\x18\xc5\xbe\x7b\x31\x12\x6d\x2b\xb1\x44\x2a\x8d\xd3\xbd\xca\xc3\xdf\x37\x9a\xf9\x38\xa4\xfc\xfb\x0c\xe0\x9f\x19\x00\xc0\x5c\xe5\xf3\x6f\x60\x8e\x75\xbd\x35\x58\xd1\x7c\xd9\x3d\x65\x87\xc6\x6b\x64\x65\x4d\xfb\xf3\xc7\xf9\x0c\xe0\xf3\x72\x68\x59\xe3\xb1\x1c\x5b\x77\x59\xa1\x2e\xb1\xfa\x08\x57\x9b\xeb\x71\xc2\x23\x39\x2f\x0b\x86\x19\xeb\xd5\x7a\xf5\x61\x68\xf1\x3c\xa7\xfb\xa6\x8c\xea\xdf\x3e\xd8\x27\xb8\xf9\xfe\xf6\x0e\x32\x5b\x55\x8d\x51\x59\xfb\x13\x3c\x29\x7e\x80\x63\x72\xd6\xb0\xb3\x5a\x93\x03\xf4\xa0\x18\x94\x87\x9a\x5c\x61\x5d\x45\xf9\x6a\x50\xfa\x4f\x6f\x4d\x5a\xd9\x36\x5c\x37\x0c\xca\xc0\x4f\xb7\x9f\x7e\x01\x01\x22\x0f\xf2\x76\x58\xe9\xd7\xf0\x7e\xbb\xfc\x79\x13\xe3\x29\xf3\x88\x5a\xe5\xdb\xc6\xe9\x11\xe0\x75\x17\x01\xbf\xde\x6c\xc0\x3a\xa0\xaa\xe6\xdd\xf0\xbb\x3a\x2a\x95\x67\xb7\x13\x58\x34\xc7\x9b\x10\x28\xcc\x38\x89\xed\x5f\x14\xaf\xdf\x81\x75\x27\xa1\x83\xb4\xec\xd0\xb6\x64\x66\xbd\x0e\x8f\xe7\xf6\x77\x43\x9e\xb7\x99\xad\x6a\x4d\x4c\xf9\x68\x62\x6d\x1c\x5c\x1d\xe2\x06\x7d\xad\x4c\x61\x63\x3b\x4a\x7e\x8f\xac\xcc\xc9\x67\x4e\xd5\x3c\xbe\x2d\xc4\x10\x1e\x24\x58\x4c\x20\xa6\xc6\x7b\xdb\x30\xf0\x03\x41\x66\x4d\xa1\xca\xc6\x75\xcf\x6d\xd1\x3e\xbc\xda\x5c\x0f\xf6\x37\x28\xa6\xcc\x77\x16\xad\xb9\x6b\x34\x6d\x73\x8a\x16\xb8\xd1\x04\xdf\x51\xa4\xb6\x9e\xdc\xa3\xca\x68\xab\x95\xe7\x58\x8d\x43\xdc\x85\xc4\x4d\x20\xa5\x6b\xbe\x51\x9e\xa1\x42\x83\x25\xe5\x50\xa9\xcc\xd9\x00\xf0\x23\x95\x7d\xc6\x8f\x55\xf8\x6d\xe4\x6e\x2e\x44\x05\x3e\x75\xa3\xa3\xeb\xe0\x0a\x6e\x9b\xba\xb6\x8e\x29\x87\x47\xd4\x0d\x79\x40\x47\xb0\x90\xa9\xb6\x58\xc2\x42\xa6\xd1\x42\xa6\xc2\x82\xf1\x5e\xd3\x62\x24\x07\x67\x1b\x4e\x77\xa1\x8d\x8a\xf4\xa0\x47\x99\xda\x81\x7e\x7d\x20\x9c\x1e\x20\x1c\x65\x4a\x10\x8b\x8d\x55\xad\xa7\x95\xee\xc6\x39\x54\xf6\x6d\x8a\xa9\xdd\x3d\x10\x84\x38\x90\x3a\xa6\xa9\x5f\xa8\xdf\x98\x09\x3d\xd9\xf0\x2e\x2c\xd2\xf1\x3e\x67\x62\xcb\xbb\x25\xd1\xaa\xf7\xa9\xc9\xe6\xbe\x92\x77\xc6\x36\xf6\xb1\x5f\x6a\xdf\xca\x10\xce\x1c\x21\x53\x74\xe3\x36\x9a\x2e\xba\xb0\x34\x67\xc2\x81\x45\xdc\xd5\x5b\x5e\x06\xf0\xd9\xfe\x9a\x90\x68\xf4\x7c\x7a\x1b\xba\x50\x3a\xce\xbf\x21\xcc\x01\xbb\x4b\x9c\x75\xe1\xf2\xa5\x74\x7b\xf8\x31\x2a\x23\x03\x01\xa1\x57\x02\x39\x07\xbb\x84\xd8\x42\xa7\xb2\x02\xa1\x78\x28\x9c\xad\xc0\x73\xae\x0c\xdc\xef\x20\xa7\x02\x1b\xcd\xb1\x24\x4b\x8a\x8f\x57\xe9\x52\x49\x63\xc3\x75\x4f\x48\xf7\xe7\xc7\xff\x58\x44\xa1\xc7\x8a\xf7\x16\xae\xdc\x60\x13\x5b\x4e\x62\x41\x0d\x5f\xd3\x7b\x24\xc6\xf8\x97\xc2\x01\xc5\x58\xa6\x58\x39\x79\x56\xa6\x5d\x3a\x8d\xd9\x5b\x90\x62\x9f\x75\x24\xb4\xa3\xa0\x1d\x0a\x29\x59\xd4\xf1\x0b\x74\xd0\x44\xad\xe3\x27\xdf\xf1\x7a\x97\xf4\x6c\x17\x96\xe6\xc4\xd2\xea\xae\x89\x7b\x7b\xc9\xce\x9a\xee\xaf\x80\x4f\x6f\x8c\x67\x22\xed\x97\xa3\x5c\x71\x7d\x4d\x99\x2a\x14\xe5\x7b\x07\x2e\xc5\x3a\x4b\x29\xf9\xc4\x76\x87\x04\xce\xe3\xf1\x00\x3b\x97\xcd\x8f\xc5\x79\x17\xa7\x07\x7c\xca\x75\x97\xaf\xb0\x9b\xb0\x0a\xeb\x12\x87\xf4\x0f\x12\x01\xed\x92\xfd\xff\x00\xf2\x21\xd3\x7e\xc4\x84\x6f\x9b\x89\x5a\xfd\x25\x63\xc6\xb1\xb0\xb3\x0d\x38\x42\xad\x77\xf0\x84\x86\xe5\x38\xe8\x18\xc7\xad\xf4\xed\x33\xbd\xa0\xc6\x0e\x8b\x42\x65\x5b\xcf\xe8\x7a\xe3\xff\xa5\x42\x08\xbb\x68\xc3\xe6\xb3\xcf\xcb\xd9\x28\xe3\xa5\xcf\x4f\xce\x50\x89\x82\xf6\x61\x41\xce\xc9\x91\x16\x00\x92\x34\x82\xa1\xa7\xc3\x25\xd8\x16\xa7\xfb\x2c\xa6\x7d\xec\xc8\xff\xa9\x7a\x7a\x69\x9b\x70\x65\x8b\x01\x43\x22\x09\x60\x3f\x65\xb6\xfb\xd7\x49\xa0\x4f\xc6\xfe\xc9\x56\x80\x9a\x5c\x46\x86\xb1\xa4\xf6\x2b\x3b\x54\x69\x7d\xf1\x61\xbd\x16\x1d\x4f\x26\x6f\xf5\x5e\xa4\xf0\x55\xb8\x62\x80\xf2\xf0\x61\xbd\xa7\x7c\x1d\xc9\x87\xea\x29\x86\xa3\x3a\x4a\x48\xdb\x8d\x6a\x68\xea\x36\x5d\xac\x6c\x63\xb8\xff\x56\x6f\xea\x3d\xd5\x51\xc3\xbd\xa7\xee\x59\x2d\x47\xf5\xb6\xcb\xf0\x1d\x6c\x21\xb2\xb3\x3f\x66\xff\x06\x00\x00\xff\xff\xaf\x71\x6b\x83\x08\x16\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 5640, mode: os.FileMode(493), modTime: time.Unix(1480607700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

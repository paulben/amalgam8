// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x98\xcd\x6e\xe3\x36\x10\xc7\xef\x7e\x8a\x81\x2f\x6e\x01\xc7\x70\x6e\x8b\x5e\x8a\x20\xfd\x40\x0a\xb7\x0b\x24\xe9\xa1\x28\x0a\x63\x22\x8d\x14\xb6\x14\xa9\x92\xa3\x04\x46\xb1\xef\x5e\x8c\x44\xdb\x4a\x2c\x91\x4a\xe3\xee\x5e\xed\xe1\xef\x3f\x9e\x2f\x0e\xfd\xfb\x0c\xe0\x9f\x19\x00\xc0\x5c\xe5\xf3\x6f\x60\x8e\x75\xbd\x35\x58\xd1\x7c\xd9\x7d\xca\x0e\x8d\xd7\xc8\xca\x9a\xf6\xeb\x0f\xf3\x19\xc0\xa7\xe5\xd0\xb1\xc6\x63\x39\x76\xee\xaa\x42\x5d\x62\xf5\x01\xae\x37\x37\xe3\x84\x27\x72\x5e\x0e\x0c\x33\xd6\xab\xf5\xea\x72\xe8\xf0\x3c\xa7\x87\xa6\x8c\xea\xdf\x3d\xda\x67\xb8\xfd\xfe\xee\x1e\x32\x5b\x55\x8d\x51\x59\xfb\x15\x3c\x2b\x7e\x84\xa3\x73\xd6\xb0\xb3\x5a\x93\x03\xf4\xa0\x18\x94\x87\x9a\x5c\x61\x5d\x45\xf9\x6a\x50\xfa\x4f\x6f\x4d\x5a\xd9\x36\x5c\x37\x0c\xca\xc0\x4f\x77\x1f\x7f\x01\x01\x22\x0f\xf2\x76\x58\xe9\xb7\xf0\x7e\xbb\xfa\x79\x13\xe3\x29\xf3\x84\x5a\xe5\xdb\xc6\xe9\x11\xe0\x4d\x67\x01\xbf\xde\x6e\xc0\x3a\xa0\xaa\xe6\xdd\xf0\x6f\x75\x54\x2a\xcf\x6e\x27\xb0\xa8\x8f\xb7\xc1\x50\x98\x71\x12\xdb\xbf\x28\x1e\xbf\x03\xeb\x5e\x4c\x07\x69\xd9\x21\x6d\x49\xcf\x7a\x19\x1e\xf7\xed\xef\x86\x3c\x6f\x33\x5b\xd5\x9a\x98\xf2\x51\xc7\x5a\x3b\xb8\x3e\xd8\x0d\xd6\xb5\x32\x85\x8d\x75\x94\x7c\x1f\x39\x99\x93\xcf\x9c\xaa\x79\xbc\x2d\xa4\x20\x3c\x88\xb1\x14\x81\x14\x35\x3e\xd8\x86\x81\x1f\x09\x32\x6b\x0a\x55\x36\xae\xfb\xdc\x16\xed\x87\xd7\x9b\x9b\xc1\xfc\x06\xc5\x54\xf1\x9d\x45\x6b\xee\x1a\x4d\xdb\x9c\xa2\x01\x6e\x34\xc1\x77\x14\x89\xad\x27\xf7\xa4\x32\xda\x6a\xe5\x39\x16\xe3\x60\x77\x21\x76\x13\x48\xe9\x98\x6f\x94\x67\xa8\xd0\x60\x49\x39\x54\x2a\x73\x36\x00\xfc\x48\x64\x5f\xf0\x63\x11\x7e\x1f\xb9\x9b\x0b\x51\x81\x8f\xdd\xe8\xe8\x32\xb8\x82\xbb\xa6\xae\xad\x63\xca\xe1\x09\x75\x43\x1e\xd0\x11\x2c\x64\xaa\x2d\x96\xb0\x90\x69\xb4\x90\xa9\xb0\x60\x7c\xd0\xb4\x18\xf1\xc1\xd9\x86\xd3\x59\x68\xad\x22\x39\xe8\x51\xa6\x66\xa0\x1f\x1f\x08\xb7\x07\x08\x47\x99\x12\xa4\xc4\xc6\xa2\xd6\xd3\x4a\x67\xe3\x1c\x2a\xfb\x34\xc5\xd4\xee\x1f\x09\x82\x1d\x48\x1c\xd3\xd4\x2f\x94\x6f\xcc\x84\x9e\x4c\x78\x67\x16\xc9\x78\x9f\x33\x31\xe5\xdd\x91\x68\xd4\xfb\xd4\x64\x72\xdf\xc8\x3b\x63\x1a\xfb\xd8\x2f\xd5\xb7\x32\x84\x33\x47\xc8\x14\x6d\xdc\x46\xd3\x45\x67\x96\xe6\x4c\xb8\xb0\x88\xbb\x78\xcb\x8f\x01\x7c\xd1\x5f\x13\x1c\x8d\xde\x4f\xef\x43\x17\x4a\xc7\xf9\xb7\x84\x39\x60\xb7\xc4\x59\x17\x96\x2f\xa5\xdb\xcb\x8f\x51\x19\x19\x08\x08\xbd\x10\xc8\x3d\xd8\x39\xc4\x16\x3a\x95\x15\x08\xc5\x43\xe1\x6c\x05\x9e\x73\x65\xe0\x61\x07\x39\x15\xd8\x68\x8e\x39\x59\x52\x7c\xbc\x4a\x96\x4a\x1a\x1b\xae\x7b\x42\x3a\x3f\x3f\xfe\xc7\x20\x0a\x3d\x16\xbc\xf7\x70\x65\x83\x4d\xb4\x9c\xd8\x82\x1a\x5e\xd3\x7b\x24\xc6\xf8\x4b\xe1\x80\x62\x2c\x53\xac\x9c\x3c\x2b\xd3\x1e\x9d\xc6\xec\x1d\x48\xb1\xcf\x3a\x12\xda\x51\xd0\x0e\x85\x94\x2c\xea\xf8\x02\x1d\x34\x51\xeb\xf8\xcd\x77\x5c\xef\x92\x35\xdb\x99\xa5\x39\x31\xb7\xba\x35\x71\x5f\x5e\xd2\x59\xd3\xeb\x2b\xe0\xd3\x8d\xf1\x42\xa4\x7d\x39\xca\x8a\xeb\x6b\xca\x54\xa1\x28\xdf\x57\xe0\x52\x4a\x67\x29\x21\x9f\x98\xee\xe0\xc0\x79\x6a\x3c\xc0\xce\x55\xe6\xc7\xe0\xfc\x2f\x95\x1e\xf0\xa9\xaa\xbb\x7a\x43\xb9\x09\xab\xb0\x2e\x71\x49\xff\x20\x16\xd0\x1e\xd9\xff\x0f\x20\x0f\x99\xf6\x11\x13\xde\x36\x13\xb5\xfa\x47\xc6\x0a\xc7\xc2\xce\x36\xe0\x08\xb5\xde\xc1\x33\x1a\x96\xeb\xa0\x63\x1c\x5b\xe9\xdb\x17\x7a\x41\x8d\x1d\x16\x85\xca\xb6\x9e\xd1\xf5\xc6\xff\x6b\x85\x60\x76\xd1\x9a\xcd\x67\x9f\x96\xb3\x51\xc6\xeb\x3a\x3f\xb9\x43\xc5\x0a\xd8\xa1\x2f\xc8\x39\xb9\xd1\xc2\x79\xf1\x19\xc1\xd0\xf3\x61\x07\xb6\xc5\x69\x9b\xc5\xa4\x8f\x09\xf9\x8c\xa2\xa7\x2b\xdb\x84\x85\x2d\x06\x0c\x8e\x24\x80\x7d\x97\xd9\xee\x7f\x4e\x02\x7d\x32\xf4\x4f\x1a\x01\x6a\x72\x19\x19\xc6\x92\xda\x37\x76\x88\xd2\xfa\xe2\x72\xbd\x16\x1d\x4f\x26\x6f\xf5\x5e\xb9\xf0\x55\x58\x30\x40\x79\xb8\x5c\xef\x29\x5f\x8b\x3f\xb3\x3f\x66\xff\x06\x00\x00\xff\xff\xba\x6d\x9d\x72\x07\x14\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 5127, mode: os.FileMode(493), modTime: time.Unix(1480518417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
